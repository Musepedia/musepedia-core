# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from src.rpc.proto import QA_pb2 as src_dot_rpc_dot_proto_dot_QA__pb2


class MyServiceStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAnswer = channel.unary_unary(
                '/MyService/GetAnswer',
                request_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.SerializeToString,
                response_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.FromString,
                )
        self.GetAnswerWithOpenQA = channel.unary_unary(
                '/MyService/GetAnswerWithOpenQA',
                request_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.SerializeToString,
                response_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.FromString,
                )
        self.GetExhibitAlias = channel.unary_unary(
                '/MyService/GetExhibitAlias',
                request_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasRequest.SerializeToString,
                response_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasReply.FromString,
                )


class MyServiceServicer(object):
    """The greeting service definition.
    """

    def GetAnswer(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnswerWithOpenQA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExhibitAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnswer,
                    request_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.FromString,
                    response_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.SerializeToString,
            ),
            'GetAnswerWithOpenQA': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnswerWithOpenQA,
                    request_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.FromString,
                    response_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.SerializeToString,
            ),
            'GetExhibitAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExhibitAlias,
                    request_deserializer=src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasRequest.FromString,
                    response_serializer=src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MyService(object):
    """The greeting service definition.
    """

    @staticmethod
    def GetAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MyService/GetAnswer',
            src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.SerializeToString,
            src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnswerWithOpenQA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MyService/GetAnswerWithOpenQA',
            src_dot_rpc_dot_proto_dot_QA__pb2.QARequest.SerializeToString,
            src_dot_rpc_dot_proto_dot_QA__pb2.QAReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExhibitAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MyService/GetExhibitAlias',
            src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasRequest.SerializeToString,
            src_dot_rpc_dot_proto_dot_QA__pb2.ExhibitLabelAliasReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
